{\rtf1\ansi\ansicpg1254\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ## Introduction to Mobile Application Development\
\
## What is the mobile developer role?\
\
Role of a mobile developer, highlighting the rapid growth in app development and the increasing demand for mobile developers. The common tasks and responsibilities of mobile developers include designing, building, and maintaining mobile applications, integrating third-party APIs, writing code, and releasing apps and updates. Mobile developers often work in teams and use version control systems like GitHub for collaborative projects.\
\
The video emphasizes the importance of coding skills in languages such as Java, Kotlin, Objective C, and Swift, depending on the operating system. Additional skills like design, user experience (UX), server technology, and continuous integration (CI) are also valuable. The job market for mobile developers is diverse, ranging from large companies like Meta to small startups. Job options include working as a freelancer or starting one's own development company. The video aims to spark excitement about the opportunities available in the field of mobile development.\
\
## What is a mobile app?\
\
Mobile apps in reaching global mobile users and discusses the considerations between developing mobile apps and mobile websites. It highlights that businesses, facing resource constraints, may opt for mobile apps to connect with their target audience due to the increasing demand. The distinction between mobile websites and mobile apps is explained, with mobile websites being browser-based and dependent on an internet connection, while mobile apps are installable software utilizing device hardware and software features for a more intuitive user experience.\
\
The decision between a mobile app and website depends on the specific actions the product needs to perform. Content-driven products may suit mobile websites, while actions requiring device hardware favor mobile apps. Advantages of mobile apps, such as speed, offline access, and utilization of device resources, are outlined. However, the video also acknowledges the drawbacks, including higher development costs, maintenance challenges, and the need for separate development for different platforms. The difficulty of meeting App Store requirements is also mentioned. The video aims to familiarize viewers with the pros and cons of mobile apps, encouraging them to consider these factors in their learning journey toward creating their own apps.\
\
## **How does a mobile OS work?**\
\
The most fundamental software for any mobile device is its OS. An OS is designed to coordinate communications that occur between the hardware and apps of mobile devices. Popular platforms such as Android and iOS provide a wide range of applications in addition to the built-in OS.\
\
### **Mobile operating systems**\
\
A mobile OS typically starts up when a device powers on, displaying different application icons and user interface (UI) elements to users. The overall experience of the application and swiping or tapping is managed by the mobile OS.\
\
![6y4pvD1DRZSuKbw9QzWUwA_b8d51a31cbb34c69b6b87ca94dcb0fe1_ADC1M1L2item3.png](Meta%20Android%20Developer%20Coursera%20d4e715a2e3674c5baab68e34e9566bf6/6y4pvD1DRZSuKbw9QzWUwA_b8d51a31cbb34c69b6b87ca94dcb0fe1_ADC1M1L2item3.png)\
\
### **The function of mobile operating systems**\
\
The major function of mobile operating systems is to allow smartphones, tablets, personal digital assistants (PDAs) and other handheld devices to run applications. The OS provides a channel with which applications can access device resources such as the processor, memory, Wi-Fi, Bluetooth and more. Most of the mobile operating systems in the market are based on open (Android) or closed source (iOS) software.\
\
### **Android**\
\
Android is a mobile OS that was released in 2008. You\'92ll likely find that it is the base OS of most phones and tablets worldwide.\
\
Android OS is based on a modified version of the Linux kernel, which is the foundation of the Linux computer OS and other open-source software. This is software that anyone can use or modify. The Android OS is built primarily for smartphones, Chromebook, Android TV, Android Auto, as well as wearables such as smartwatches.\
\
Android gives users a multitouch experience, which implies that all user input is via touch gesturing. Through several actions such as swiping, pulling and tapping, users can seamlessly interact with the screen. With built-in sensors such as gyroscopes and accelerometers, Android devices allow users to switch between the orientations of applications when tilting the devices.\
\
## Android Languages: Java & Kotlin\
\
For those aspiring to delve into Android application development and establish a presence in the mobile technology industry, a crucial step involves familiarizing oneself with key programming languages. This video focuses on two prominent languages in the realm of Android development: Java and Kotlin.\
\
Java, introduced by Sun Microsystems in 1995, stands as one of the most widely adopted programming languages, catering to a diverse range of applications like Android apps, web apps, embedded systems, and server apps. Initially, Java was the primary language for Android development. However, as the platform evolved and sought a more contemporary language, Kotlin emerged as a compelling alternative.\
\
Introduced by JetBrains in 2011, Kotlin has gained substantial traction and is now officially recognized as the preferred language for Android app development. One of its notable advantages over Java lies in its conciseness and time-saving attributes. Kotlin's streamlined syntax results in fewer lines of code, enhancing readability, reducing errors, and facilitating easier project maintenance, even for complex endeavors.\
\
Furthermore, Kotlin boasts full compatibility and interoperability with Java. Developers can seamlessly incorporate Java commands, libraries, and frameworks into Kotlin projects without encountering compatibility issues. The transition from Java to Kotlin is simplified, allowing for code conversion with a single click.\
\
Kotlin also addresses common issues experienced by developers working with Java, particularly in handling errors that often lead to app crashes on the Android platform. This makes Kotlin an attractive choice for creating robust and stable Android applications.\
\
In conclusion, this presentation provides an insightful overview of the Android programming languages Java and Kotlin. With a focus on the benefits of Kotlin, including conciseness, compatibility with Java, and improved error handling, the audience is encouraged to anticipate working with Kotlin for their Android app development projects in the course ahead.\
\
## Android OS\
\
### What is an Android OS?\
\
Android is a Linux-based OS primarily designed for touch screen mobile devices such as smartphones and tablets. However, the operating system has evolved in recent years into a complete set of operating systems for various other devices, such as wearables, Chromebook laptops and smart TVs.\
\
Some of the unique features and characteristics of the Android OS include:\
\
- Near-field communication (NFC)\
- Wi-Fi\
- Custom home screen\
- Widgets\
- App downloads\
- Custom ROMs\
\
Let\'92s explore these features.\
\
### **NFC**\
\
Most Android devices support NFC. This feature makes it easy for electronic devices to communicate over short distances. You can use your NFC enabled Android devices to make contactless payments from a supported debit card, credit card or PayPal account.\
\
**Wi-Fi**\
\
Android provides an in-built technology that includes support for various Wi-Fi protocols and modes such as Wi-Fi hotspot, and Wi-Fi Direct. With this feature, users can connect to various wireless access points around them.\
\
**Custom home screen**\
\
Android OS allows you to further personalize your home screen the way you like it. While users have the capability to make adjustments to their experience, there are some limits to what you can do.\
\
**Widgets**\
\
When it comes to home screen customization, widgets are key components. You can see them as at-a-glance views that allow users to see the most important data.\
\
**App downloads**\
\
Google provides a seamless way for Android operating system users to download apps on their devices. This way, users can unlock the full potential of the Android operating system.\
\
**Custom ROMs**\
\
One major feature that distinguishes Android from Apple devices is the ability to run customized and modified versions of the Android operating system to enjoy both user interface experience changes and access to features of a recent operating system on an older device.\
\
## The Android OS architecture\
\
The Android OS architecture is made up of different components that any Android device needs to function effectively. Android software is built on top of an open-source Linux kernel and many other C or C++ libraries exposed via application framework services.\
\
Among all the components, the Linux kernel provides the main OS functions for smartphones and the Android Runtime (ART) provides a platform for running an Android application. ART was introduced as a faster replacement for the Dalvik Virtual Machine.  An Android OS is a stack of software components roughly divided into five sections:\
\
- Applications\
- Applications Framework\
- Android Runtime\
- Platform Libraries\
- Linux Kernel\
\
These are separated into 4 layers, as shown in the architecture diagram below.\
\
![qHi-z6qtQ3y4vs-qrQN8xQ_a0afdd3e0c364406851e2fefe72ce3e1_Picture-1.png](Meta%20Android%20Developer%20Coursera%20d4e715a2e3674c5baab68e34e9566bf6/qHi-z6qtQ3y4vs-qrQN8xQ_a0afdd3e0c364406851e2fefe72ce3e1_Picture-1.png)\
\
## Android Studio\
\
In the rapidly expanding mobile market, the demand for apps has created enticing opportunities for those venturing into the mobile app development business, particularly as Android mobile app developers. To navigate this industry successfully, a comprehensive understanding of the requisite tools and technologies is essential. This article focuses on one such tool, Android Studio, a key player in the mobile app development market since its launch by Google in 2013.\
\
Android Studio serves as Google's official Integrated Development Environment (IDE) tailored for building apps compatible with Android operating systems. Preferred by many developers, it not only facilitates efficient app development but also enhances overall work quality. Supporting various programming languages like Kotlin, Java, and C++, along with extensions, Android Studio offers a versatile environment for developers.\
\
Key features of Android Studio include a comprehensive build system, enabling the compilation and building of Android apps. The inclusion of a fast emulator allows developers to simulate Android devices on their computers for effective testing across different devices. The IDE's capability to build apps for diverse Android devices, along with free project templates, expedites the development process. Additionally, Android Studio supports third-party integrations, enhancing its functionality.\
\
The IDE's user interface comprises essential tools designed to streamline the development process. The toolbar facilitates actions like running apps on emulators or physical devices, while the navigation bar provides easy access to project files. The editor window allows code modifications, and the tool window bar grants access to specific tasks such as project management and version control. The status bar displays project and IDE status, including warnings or messages.\
\
In conclusion, this article underscores that Android Studio not only accommodates various programming languages but also offers functionalities crucial for efficient app development. Aspiring Android developers can anticipate further insights into additional features and benefits that Android Studio provides, contributing to a comprehensive understanding of its capabilities.\
\
## Project Templates\
\
When venturing into mobile app development, efficiency in creating applications becomes crucial. This article highlights the importance of quick initiation into app development and the role of Integrated Development Environments (IDEs) in providing essential base code for developers. IDEs, such as Android Studio, offer project templates that adhere to design principles and coding best practices, facilitating the swift creation of functional and aesthetically pleasing apps.\
\
Android Studio, a prominent IDE for Android app development, furnishes a variety of templates for creating app modules, activities, and other components. Notably, these templates streamline the process of adding new functionalities to existing projects, exemplified by the login activity template for implementing features like a login screen efficiently.\
\
The article introduces and explores three Android Studio templates: the basic activity template, which establishes a foundational codebase with common UI components; the bottom navigation activity template, simplifying the implementation of a navigation system; and the empty activity template, providing a clean slate for building an app from scratch.\
\
Benefits of using project templates are outlined, emphasizing their role in offering a clear project structure aligned with best practices, providing a preview of platform functionalities, and enabling rapid app development. These templates contribute to a quicker understanding of project structures, offer insights into platform workings, and accelerate the app development process.\
\
In conclusion, the article encourages aspiring developers to leverage project templates, offering a glimpse into the efficient and structured world of app development with Android Studio. The anticipation of further exploration into Android Studio's capabilities enhances the learning journey for future developers.\
\
## **Key Android Development concepts**\
\
### **Top Level Component**\
\
The ability to connect to the internet, make calls, take pictures and much more is made possible in Android apps with the help of four top-level component classes: BroadcastReceiver, ContentProvider, Service and Activity. These are all accessible in the Android software development kit (SDK).\
\
### **Activity Components**\
\
Activities present the content users can interact with on the screen. These are the only components that deliver interactive content to the user. An Activity represents something an application can do. Although an application can provide more than one Activity, many developers are following a Single-Activity architecture pattern when creating their apps. This implies that only one Activity or a relatively small number of Activities are used for an entire application.\
\
### **Android Views**\
\
In Android, Views occupy a rectangular area on the screen and are responsible for drawing and event handling. They can display images, text and more. A combination of all of these Views forms a design interface.\
\
### **Android Layout Files**\
\
In Android, each layout is represented by an XML file. These plain text files serve as blueprints for the interface that your application presents to the user. In addition to the XML approach, there are other ways to create a user interface. For example,  interfaces can be created with Android Views entirely in code using Kotlin or Java. Also, Google has created a completely new way of creating Android user interfaces - Jetpack Compose. With this library, interfaces are created entirely in Kotlin code, without XML.\
\
### **Project Files**\
\
Android Project Files belong to one of three main categories: configuration, code and resource. Configuration files define the project structure, code files provide the logic and resource files provide essentially everything else.\
\
## **Anatomy of an Android App**\
\
This presentation delves into the fundamental components that constitute an Android app, offering a comprehensive overview for aspiring mobile developers. The four major components, namely activities, services, broadcast receivers, and content providers, serve as the building blocks of Android applications, each with a distinct purpose and behavior.\
\
Activities, akin to screens or windows in Kotlin, represent entry points for users, facilitating the organization of user interface components. Services operate in the background, continuously updating data sources and performing tasks even when users are inactive, such as managing music playback while chatting. Broadcast receivers respond to real-time messages from other applications or systems, exemplified by notifications for low battery power during music playback. Content providers facilitate data sharing among applications, responding to requests, as illustrated by a social media app displaying gallery images.\
\
The configuration file, AndroidManifest.xml, plays a crucial role in linking these components, specifying their interactions and defining essential app information. The presentation guides through the process of editing this file to include additional components, demonstrating the foundational role of the AndroidManifest in configuring app behavior.\
\
In conclusion, the presentation provides aspiring developers with a foundational understanding of the major components of Android apps, paving the way for their progress in creating projects using Android Studio.\
\
## **Extensible Markup Language: XML**\
\
In Android development, using Extensible Markup Language (XML) is one way you can develop your app's user interface (UI). Read on to find out more about XML, its functions and structure.\
\
## What is XML?\
\
XML (Extensible Markup Language) is used in the presentation of different kinds of data. This is a flexible and descriptive way to create well-structured data and electronically distribute it across the public internet, as well as via corporate networks.\
\
Its main function is to create data formats that are used to encode information for documentation, records, transactions and several other data formats. Data presented using XML may be used for creating different data types that are generated by building dissimilar types of content, including web and mobile content.\
\
### **XML for transaction data**\
\
Thousands of XML formats exist, in many different industries, to describe day-to-day data transactions, such as:\
\
- Stocks and Shares\
- Financial transactions\
- Medical data\
- Mathematical data\
- Scientific measurements\
- News information\
- Weather services\
\
## Structure of an XML document\
\
The whole structure of XML and XML-based languages is built on tags.\
\
### **Correct design rules**\
\
For an XML document to be valid, the following conditions must be fulfilled:\
\
- The document must be well formed.\
- The document must comply with all the rules of the XML syntax.\
\
For example, the XML structure below is missing </message> tag. For every opening tag, there must be a corresponding closing tag. The structure below violates that rule.\
\
```jsx\
<?xml version="1.0" encoding="UTF-8"?>\
<result>\
    <message>\
        Thank you for registering!\
</result>\
```\
\
Now examine a corrected version of the same document:\
\
```jsx\
<?xml version="1.0" encoding="UTF-8"?>\
<result>\
    <message>\
      Thank you for registering!\
    </message>\
</result>\
```\
\
> [**Mobile App Development**](https://en.wikipedia.org/wiki/Mobile_app_development)\
> \
\
> [**Mobile Operation System**](https://www.techtarget.com/searchmobilecomputing/definition/mobile-operating-system#:~:text=A%20mobile%20operating%20system%20(OS,information%20and%20provide%20application%20access)\
> \
\
> [**Introduction Android Platform**](https://developer.android.com/about)\
> \
\
> [Android OS](https://www.investopedia.com/terms/a/android-operating-system.asp)\
> \
\
> **[Java & Kotlin](https://kotlinlang.org/docs/comparison-to-java.html)**\
> \
\
> **[Introduction to XML](https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction)**\
> }